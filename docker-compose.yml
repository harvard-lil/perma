services:
  #
  # Perma
  #
  # TO USE REDIS FOR CACHING:
  # Add the caches setting found in settings_prod to your settings.py,
  # with "LOCATION": "redis://perma-redis:6379/0"
  # (Don't clobber the Celery backend, which is at /1)
  perma-redis:
    image: registry.lil.tools/library/redis:4.0.6
    volumes:
      - redis_data:/data:delegated
  db:
    image: registry.lil.tools/library/postgres:12.11
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: perma
      POSTGRES_USER: perma
    volumes:
      - postgres_data:/var/lib/postgresql/data:delegated
    networks:
      - default
      - superset
  web:
    image: registry.lil.tools/harvardlil/perma-web:127-a25bd11a95f3066784c6f89a12c2568d
    tty: true
    command: bash
    # TO AUTOMATICALLY START PERMA:
    # (sleep hack to give the database and rabbitmq time to start up)
    # command: >
    #   sh -c "sleep 10 && ./manage.py migrate && invoke run"
    volumes:
      # NAMED VOLUMES
      - scoop_access_key:/tmp/scoop_access_key:ro
      # Use a named, persistent volume so that the node_modules directory,
      # which is created during the image's build process, and which our
      # code presently expects to be nested inside the perma_web directory,
      # isn't wiped out when mounting our code in ./perma_web code to
      # the container. We can consider restructuring the project instead.
      - node_modules:/perma/perma_web/node_modules
      # BIND MOUNTS
      - ./perma_web:/perma/perma_web
      - ./services/celery:/perma/services/celery
      - ./services/cloudflare:/perma/services/cloudflare
      - ./services/django:/perma/services/django:delegated
      - ./services/logs:/perma/services/logs:delegated
      # for playwright tests
      - ./services/docker/minio/ssl:/tmp/minio_ssl
      - ./services/docker/wacz-exhibitor/ssl:/tmp/wacz-exhibitor_ssl
    # give chrome lots of space for making big screenshots
    # https://github.com/elgalu/docker-selenium/issues/20
    shm_size: 2G
    environment:
      - DJANGO_LIVE_TEST_SERVER_ADDRESS=0.0.0.0:8000
    extra_hosts:
      - "perma.test:127.0.0.1"
      - "api.perma.test:127.0.0.1"
    ports:
      - "127.0.0.1:8000:8000"
      - "127.0.0.1:5173:5173"
    depends_on:
      - db
    networks:
      default:
        aliases:
          - 'perma.test'
          - 'api.perma.test'
      perma_payments:
      scoop_rest_api:
        aliases:
          - 'perma.test'

  #
  # Minio
  #
  minio:
    image: minio/minio:RELEASE.2022-05-03T20-36-08Z
    entrypoint:
      - "/entrypoint.sh"
    command:
      - "server"
      - "--address"
      - ":9000"
      - "--console-address"
      - ":9001"
      - " --certs-dir"
      - "/ssl"
      - "/data"
    environment:
      - MINIO_SERVER_URL=https://perma.minio.test:9000
      # synonym for old MINIO_ACCESS_KEY
      - MINIO_ROOT_USER=accesskey
      # synonym for old MINIO_SECRET_KEY
      - MINIO_ROOT_PASSWORD=secretkey
      - DATA_DIR=/data
      - BUCKET=perma-storage
      - SECONDARY_BUCKET=perma-secondary-storage
      - MINIO_API_CORS_ALLOW_ORIGIN=https://replay.perma.test:8000
    volumes:
      - ./services/docker/minio/entrypoint.sh:/entrypoint.sh
      - ./services/docker/minio/ssl:/ssl
      - minio_data:/data:delegated
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    extra_hosts:
      - "perma.minio.test:127.0.0.1"
    networks:
      default:
        aliases:
          - 'perma.minio.test'

  #
  # wacz-exhibitor
  #
  wacz-exhibitor:
    image: registry.lil.tools/harvardlil/wacz-exhibitor:5-14853706630a07e835ebb9da840ece83
    ports:
      - "127.0.0.1:8080:8080"
    extra_hosts:
      - "rejouer.perma.test:127.0.0.1"
    networks:
      default:
        aliases:
          - 'rejouer.perma.test'
    volumes:
      - ./services/docker/wacz-exhibitor/ssl:/etc/nginx/certs

  #
  # Upload scanning
  #
  filecheck:
    image: registry.lil.tools/harvardlil/perma-filecheck:0.105
    environment:
      - UVICORN_PORT=8888
    ports:
      - "127.0.0.1:8888:8888"
    networks:
      - default


volumes:
  node_modules:
  postgres_data:
  redis_data:
  pp_db_data:
  scoop_redis_data:
  scoop_postgres_data:
  scoop_access_key:
  minio_data:
  superset_data:

networks:
  default:
  perma_payments:
      name: perma-payments_default
  scoop_rest_api:
      name: perma-scoop-api_default
  scoop_rest_api_internal:
  superset:
