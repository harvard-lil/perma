version: '2'

services:
  #
  # Perma
  #
  # TO USE REDIS FOR CACHING:
  # Add the caches setting found in settings_prod to your settings.py,
  # with "LOCATION": "redis://perma-redis:6379/0"
  # (Don't clobber the Celery backend, which is at /1)
  perma-redis:
    image: registry.lil.tools/library/redis:4.0.6
    volumes:
      - redis_data:/data:delegated
  db:
    image: registry.lil.tools/library/postgres:12.8
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: perma
      POSTGRES_USER: perma
    volumes:
      - postgres_data:/var/lib/postgresql/data:delegated
    networks:
      - default
  mysqldb:
    image: registry.lil.tools/library/mysql:5.6
    environment:
        MYSQL_ROOT_PASSWORD: password
    volumes:
      # NAMED VOLUMES
      # If the volume contains a database (a subdirectory named mysql)
      # when you start the container, it will be left untouched and unaffected
      # by config environment variables like $MYSQL_ROOT_PASSWORD.
      - prod_data:/var/lib/mysql:delegated
      # BIND MOUNTS
      - ./services/docker/pgloader/conf.d:/etc/mysql/conf.d
    networks:
      - default
  web:
    build:
      context: .
      dockerfile: ./perma_web/Dockerfile
      args:
        chrome-layer-cache-buster: 2ef978cc-0afe-4fb1-9239-50d3b77e5ba1
    image: perma3:0.128
    tty: true
    command: bash
    # TO AUTOMATICALLY START PERMA:
    # (sleep hack to give the database and rabbitmq time to start up)
    # command: >
    #   sh -c "sleep 10 && pipenv run ./manage.py migrate &&
    #          pipenv run fab run"
    volumes:
      # NAMED VOLUMES
      # Use a named, persistent volume so that the node_modules directory,
      # which is created during the image's build process, and which our
      # code presently expects to be nested inside the perma_web directory,
      # isn't wiped out when mounting our code in ./perma_web code to
      # the container. We can consider restructuring the project instead.
      - node_modules:/perma/perma_web/node_modules
      # BIND MOUNTS
      - ./perma_web:/perma/perma_web
      - ./services/celery:/perma/services/celery
      - ./services/cloudflare:/perma/services/cloudflare
      - ./services/django:/perma/services/django:delegated
      - ./services/logs:/perma/services/logs:delegated
      - ./services/warcprox:/perma/services/warcprox:delegated
    # give chrome lots of space for making big screenshots
    # https://github.com/elgalu/docker-selenium/issues/20
    shm_size: 2G
    environment:
      - DOCKERIZED=True
    extra_hosts:
      - "perma.test:127.0.0.1"
      - "api.perma.test:127.0.0.1"
      # N.B. the "perma-archives.test" host is unnecessary if playback is handled by WR
      - "perma-archives.test:127.0.0.1"
      # N.B. the "web" host is required for functional tests if playback is handled by WR
      - "web:127.0.0.1"
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      - db
    networks:
      - default
      - webrecorder


  #
  # Perma Functional Tests
  #
  selenium:
    image: registry.lil.tools/selenium/standalone-chrome:3.141.59-fluorine
    volumes:
      - /dev/shm:/dev/shm
    environment:
      - START_XVFB=false
    ports:
      - "127.0.0.1:4444:4444"
    networks:
      - default


  #
  # Perma Payments
  #
  pp_db:
    image: registry.lil.tools/library/postgres:12.8
    environment:
      POSTGRES_PASSWORD: example
    volumes:
      - pp_db_data:/var/lib/postgresql/data:delegated
    networks:
      - perma_payments

  perma-payments:
    image: registry.lil.tools/harvardlil/perma-payments:0.36
    # hack: sleep to give the database time to start up
    command: >
      sh -c "sleep 5 && ./manage.py migrate && fab run"
    ports:
      - "127.0.0.1:80:80"
    depends_on:
      - pp_db
    environment:
      - DOCKERIZED=True
      - DJANGO__DATABASES__default__HOST=pp_db
    # TO CUSTOMIZE CONFIG:
    # copy ./services/docker/perma-payments/settings.py.example
    # to ./services/docker/perma-payments/settings.py,
    # alter config as desired, in the usual way, then comment in this volume
    # and re-run docker-compose up
    # volumes:
    #   - ./services/docker/perma-payments/settings.py:/perma-payments/config/settings/settings.py
    networks:
      - default
      - perma_payments

  #
  # Upload scanning
  #
  filecheck:
    image: registry.lil.tools/harvardlil/perma-filecheck:0.7
    environment:
      - UVICORN_PORT=8888
    ports:
      - "127.0.0.1:8888:8888"
    networks:
      - default

  #
  # Webrecorder
  #
  app:
    image: registry.lil.tools/harvardlil/webrecorder:0.11
    command: uwsgi --need-app /code/apps/apiapp.ini
    env_file:
      - ./services/docker/webrecorder/wr.env
    environment:
      - REFUSE_PLAYBACK=${REFUSE_PLAYBACK}
    depends_on:
      - warcserver
      - recorder
      - redis
    volumes:
      - wr_warcs:/data/warcs:ro
      - ./services/docker/webrecorder/wr-custom.yaml:/code/webrecorder/config/wr-custom.yaml:ro
      - ./services/docker/webrecorder/contentcontroller.py:/code/webrecorder/contentcontroller.py:ro
      # Temporary patches for webrecorder
      - ./services/docker/webrecorder/maincontroller.py:/code/webrecorder/maincontroller.py:ro
      - ./services/docker/webrecorder/importer.py:/code/webrecorder/models/importer.py:ro
    networks:
      - webrecorder

  recorder:
    image: registry.lil.tools/harvardlil/webrecorder:0.11
    user: root
    entrypoint:
      - "/docker-entrypoint.sh"
    command:
      - "uwsgi"
      - "--need-app"
      - "/code/apps/rec.ini"
    environment:
      - WR_DEBUG=False
    env_file:
      - ./services/docker/webrecorder/wr.env
    depends_on:
      - warcserver
      - redis
    volumes:
      - wr_warcs:/data/warcs
      - ./services/docker/webrecorder/wr-custom.yaml:/code/webrecorder/config/wr-custom.yaml:ro
      - ./services/docker/webrecorder/docker-entrypoint.sh:/docker-entrypoint.sh:ro
      # Temporary patches for webrecorder
      # https://github.com/webrecorder/webrecorder/pull/716
      - ./services/docker/webrecorder/recorder_main.py:/code/webrecorder/rec/main.py:ro
      - ./services/docker/webrecorder/tempchecker.py:/code/webrecorder/rec/tempchecker.py:ro
      - ./services/docker/webrecorder/local.py:/code/webrecorder/rec/storage/local.py:ro
      - ./services/docker/webrecorder/collection.py:/code/webrecorder/models/collection.py:ro
      # fixes a bug on prod, where sometimes the user is removed from redis before the storage committer code runs
      - ./services/docker/webrecorder/recording.py:/code/webrecorder/models/recording.py:ro
    networks:
      - webrecorder

  warcserver:
    image: registry.lil.tools/harvardlil/webrecorder:0.11
    command: uwsgi --need-app /code/apps/load.ini
    env_file:
      - ./services/docker/webrecorder/wr.env
    depends_on:
      - redis
    volumes:
      - wr_warcs:/data/warcs
      - ./services/docker/webrecorder/wr-custom.yaml:/code/webrecorder/config/wr-custom.yaml:ro
    networks:
      - webrecorder

  nginx:
    image: registry.lil.tools/harvardlil/nginx:0.02
    depends_on:
      - app
    volumes:
      - wr_warcs:/data/warcs:ro
      - ./services/docker/webrecorder/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./services/docker/webrecorder/nginx/webrec.conf:/etc/nginx/webrec.conf:ro
    ports:
      # The WR API. See perma_web/perma/settings/settings_common "WR_API"
      # for a description of when to expose this port
      # - "127.0.0.1:8089:80"
      # WR "content"/playback host
      - "127.0.0.1:8092:81"
    extra_hosts:
      - "perma-archives.test:127.0.0.1"
    networks:
      default:
      webrecorder:

  redis:
    image: registry.lil.tools/library/redis:4.0.6
    env_file:
      - ./services/docker/webrecorder/wr.env
    volumes:
      - wr_redis_data:/data:delegated
    networks:
      - webrecorder

  pgloader:
    build:
      context: ./services/docker/pgloader
    image: perma-pgloader:0.1
    tty: true
    volumes:
      - ./services/docker/pgloader/perma.load:/tmp/perma.load
    command: bash

volumes:
  node_modules:
  postgres_data:
  prod_data:
  redis_data:
  pp_db_data:
  wr_warcs:
  wr_redis_data:

networks:
  default:
  perma_payments:
  # TO CONNECT TO A SEPARATELY-RUNNING WEBRECORDER INSTANCE
  # instead of spinning one up here from our pre-built image
  # --------------------------------------------------------
  # 1) start the WR containers first, via WR's own repo and docker-compose file
  # 2) comment out the Webecorder service and all its associated containers above
  # 3) uncomment the "external" stanza below,
  # 4) finally, start Perma's containers
  #
  # (recommended for simultaneous Perma and Webrecorder development)
  webrecorder:
  #   external:
  #     name: webrecorder_default
