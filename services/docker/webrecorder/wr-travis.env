# Webrecorder Env
# This file contains deployment specific params

# Perma's customizations of wr.yaml are in this file
WR_USER_CONFIG=pkg://webrecorder/config/wr-custom.yaml

# Default storage (local, s3, etc...)
DEFAULT_STORAGE=local

# Local Storage Root
STORAGE_ROOT=/data/storage/

# If invites are required before registration
# If false, users can register directly
REQUIRE_INVITES=false

# If set to true/1, anonymous recording is disabled
ANON_DISABLED=false

# Frontend variables
# ============================
NODE_ENV=production
# internal port mapping for node container
# FRONTEND_PORT=
# Scheme for app and content hosts, defaults to http
# SCHEME=

# server side rendering settings
INTERNAL_HOST=nginx
INTERNAL_PORT=80
DISABLE_SSR=false

# Host settings
# set to use specific host for content and app
# recommended for security
# ============================
ALLOW_EXTERNAL=1

# If running the Perma dev server and loading from your localhost
# (e.g., from the docker machine, not from a container),
# use hosts and ports appropriate for localhost + docker-compose
APP_HOST=perma.test:8000
CONTENT_HOST=perma-archives.test:8092
CONTENT_ERROR_REDIRECT=http://perma.test:8000/archive-error

# If running the Perma tests, which take place entirely within containers,
# use hosts that docker can resolve, and the ports the services are expecting
# (e.g., the ports AFTER the colon, in docker-compose)
#APP_HOST=web:8000
#CONTENT_HOST=perma-archives:81
#CONTENT_ERROR_REDIRECT=http://web:8000/archive-error

# Rate limiting for anon users
# (0 = disabled, no rate limiting)
# If both > 0,  users can record upto RATE_LIMIT_MAX bytes
# over RATE_LIMIT_HOURS
RATE_LIMIT_MAX=0
RATE_LIMIT_HOURS=0

# S3 Options (only if using S3)
# =============================

# S3 Path to where WARC data will be stored (only if using s3)
S3_ROOT=s3://bucket/path/

# S3 Creds (only if using S3)
AWS_ACCESS_KEY_ID=ACCESS_KEY
AWS_SECRET_ACCESS_KEY=SECRET_KEY

# Email settings -- for confirmation / invite e-mails
# =============================

# Webrecorder automated emails
EMAIL_SENDER=test@localhost

# Email for received "Doesn't Look Right"
# set to enable email notifications
SUPPORT_EMAIL=

# SMTP URL for email (see Bottle Cork docs for supported SMTP URL formats: http://cork.firelet.net/howto.html)

# Using local service in Docker "mailserver" container
EMAIL_SMTP_URL=smtp://test@localhost:archive@webrecorder_mailserver_1:25

# SSL SMTP Example: if using an external service, can use the SSL form, as follows
#EMAIL_SMTP_URL=ssl://user@host:password@smtp.example.com:465

# Mailing list -- optional 3rd party mailing list management (e.g. Mailchimp)
# =============================
# Flag to enable
MAILING_LIST=false

# API endpoint
MAILING_LIST_ENDPOINT=

# Flag to turn on mailing list removal on account deletion
REMOVE_ON_DELETE=false

# API removal endpoint taking a md5 hash of the email as a template argument
MAILING_LIST_REMOVAL=$MAILING_LIST_ENDPOINT/{0}

# API key
MAILING_LIST_KEY=

# JSON API payload with python template formatting, available feilds: email, name, username
MAILING_LIST_PAYLOAD={{"email_address":"{email}","status":"subscribed"}}

# GitHub Bug Reports
# Set these to add bug reports as issues in designated github repo
#GH_ISSUE_AUTH=<username>:<token-or-password>
#GH_ISSUE_REPO=<owner>/<repo>

# POST resource to add users to an announce mailing list
ANNOUNCE_MAILING_LIST=

# API endpoint for the same resource
ANNOUNCE_MAILING_LIST_ENDPOINT=

# Redis
# ==============================
# Redis Urls for reading, and redis server for master
# Change from "redis_1" if using a remote redis server, outside Docker
REDIS_BASE_URL=redis://redis:6379/2
REDIS_BROWSER_URL=redis://redis:6379/0
REDIS_SESSION_URL=redis://redis:6379/0

# Container Hosts
WARCSERVER_HOST=http://warcserver:8080
RECORD_HOST=http://recorder:8010

# Nginx Cache proxy (for remote content)
CACHE_PROXY_URL=http://nginx:1210/


# Record Root
RECORD_ROOT=/data/warcs/

# Session Keys
# ==============================

# Run the init-default.sh script to generate random for these values

# These particular values are just for local dev and testing; regenerate for deployments!
SECRET_KEY=SVKDUWI4KG3QJUWRJ7MIHQ6PWWJULLRR5L2Z6SNA6JPKSPFYLUX3BYXNCC73G2YNTJFWJ7WSGZANNDULD5POBANYB5DTL7XAG2UA6XDG4ODEAOGBRB77K5WZ
ENCRYPT_KEY=IUOTAHEJRVYP5H5447FPJX7LJRYI4VOMDVRGE6JANZITDJYJGJVCKZKYQDTEKIUDJXRU4YY2URJEYVFHVQZQ7ZI4C42MEJARFNYLS6ZSVCAG6UV63NAG4TP7
VALIDATE_KEY=H7G7OBHPPTTVYND3IIRCPYQX3PGOYHDCZOKV4B3AVJE7BH6CLSNQL5J6LTD4JMQIKVSVNMLTGO6HR7ZHQYWQFH77NYCGR2FD3V2GKKBV2ZJQC45IKLXH753T
