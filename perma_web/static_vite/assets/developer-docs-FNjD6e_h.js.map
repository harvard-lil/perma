{"version":3,"file":"developer-docs-FNjD6e_h.js","sources":["../../static/js/developer-docs.js"],"sourcesContent":["// This is a helper for pretty printing JSON\n// To use, add a prettyprint class to a pre or code element\n// This depends on jquery\n\n// JSON Pretty Printing courtesy of http://joncom.be/code/javascript-json-formatter/\n\n\nfunction RealTypeOf(v) {\n  if (typeof(v) == \"object\") {\n    if (v === null) return \"null\";\n    if (v.constructor == (new Array).constructor) return \"array\";\n    if (v.constructor == (new Date).constructor) return \"date\";\n    if (v.constructor == (new RegExp).constructor) return \"regex\";\n    return \"object\";\n  }\n  return typeof(v);\n}\n\nfunction FormatJSON(oData, sIndent) {\n  if (arguments.length < 2) {\n    var sIndent = \"\";\n  }\n  var sIndentStyle = \"    \";\n  var sDataType = RealTypeOf(oData);\n\n  // open object\n  if (sDataType == \"array\") {\n    if (oData.length == 0) {\n      return \"[]\";\n    }\n    var sHTML = \"[\";\n  } else {\n    var iCount = 0;\n    $.each(oData, function() {\n      iCount++;\n      return;\n    });\n    if (iCount == 0) { // object is empty\n      return \"{}\";\n    }\n    var sHTML = \"{\";\n  }\n\n  // loop through items\n  var iCount = 0;\n  $.each(oData, function(sKey, vValue) {\n    if (iCount > 0) {\n      sHTML += \",\";\n    }\n    if (sDataType == \"array\") {\n      sHTML += (\"\\n\" + sIndent + sIndentStyle);\n    } else {\n      sHTML += (\"\\n\" + sIndent + sIndentStyle + \"\\\"\" + sKey + \"\\\"\" + \": \");\n    }\n\n    // display relevant data type\n    switch (RealTypeOf(vValue)) {\n      case \"array\":\n      case \"object\":\n        sHTML += FormatJSON(vValue, (sIndent + sIndentStyle));\n        break;\n      case \"boolean\":\n      case \"number\":\n        sHTML += vValue.toString();\n        break;\n      case \"null\":\n        sHTML += \"null\";\n        break;\n      case \"string\":\n        sHTML += (\"\\\"\" + vValue + \"\\\"\");\n        break;\n      default:\n        sHTML += (\"TYPEOF: \" + typeof(vValue));\n    }\n\n    // loop\n    iCount++;\n  });\n\n  // close object\n  if (sDataType == \"array\") {\n    sHTML += (\"\\n\" + sIndent + \"]\");\n  } else {\n    sHTML += (\"\\n\" + sIndent + \"}\");\n  }\n\n  // return\n  return sHTML;\n};\n\n$( document ).ready(function() {\n  $(\".prettyprint\").each(function() {\n    try{\n      var str = JSON.parse($(this).text());\n      $(this).html(FormatJSON(str));\n    }catch(e){\n      // invalid json example\n    }\n  });\n});\n"],"names":["RealTypeOf","v","FormatJSON","oData","sIndent","sIndentStyle","sDataType","sHTML","iCount","sKey","vValue","str"],"mappings":"AAOA,SAASA,EAAWC,EAAG,CACrB,OAAI,OAAOA,GAAM,SACXA,IAAM,KAAa,OACnBA,EAAE,aAAgB,IAAI,QAAO,YAAoB,QACjDA,EAAE,aAAgB,IAAI,OAAM,YAAoB,OAChDA,EAAE,aAAgB,IAAI,SAAQ,YAAoB,QAC/C,SAEF,OAAOA,CAChB,CAEA,SAASC,EAAWC,EAAOC,EAAS,CAClC,GAAI,UAAU,OAAS,EACrB,IAAIA,EAAU,GAEhB,IAAIC,EAAe,OACfC,EAAYN,EAAWG,CAAK,EAGhC,GAAIG,GAAa,QAAS,CACxB,GAAIH,EAAM,QAAU,EAClB,MAAO,KAET,IAAII,EAAQ,GAChB,KAAS,CACL,IAAIC,EAAS,EAKb,GAJA,EAAE,KAAKL,EAAO,UAAW,CACvBK,GAEN,CAAK,EACGA,GAAU,EACZ,MAAO,KAET,IAAID,EAAQ,GACb,CAGD,IAAIC,EAAS,EACb,SAAE,KAAKL,EAAO,SAASM,EAAMC,EAAQ,CAWnC,OAVIF,EAAS,IACXD,GAAS,KAEPD,GAAa,QACfC,GAAU;AAAA,EAAOH,EAAUC,EAE3BE,GAAU;AAAA,EAAOH,EAAUC,EAAe,IAAOI,EAAO,MAIlDT,EAAWU,CAAM,EAAC,CACxB,IAAK,QACL,IAAK,SACHH,GAASL,EAAWQ,EAASN,EAAUC,CAAY,EACnD,MACF,IAAK,UACL,IAAK,SACHE,GAASG,EAAO,WAChB,MACF,IAAK,OACHH,GAAS,OACT,MACF,IAAK,SACHA,GAAU,IAAOG,EAAS,IAC1B,MACF,QACEH,GAAU,WAAa,OAAOG,CACjC,CAGDF,GACJ,CAAG,EAGGF,GAAa,QACfC,GAAU;AAAA,EAAOH,EAAU,IAE3BG,GAAU;AAAA,EAAOH,EAAU,IAItBG,CACT,CAEA,EAAG,QAAQ,EAAG,MAAM,UAAW,CAC7B,EAAE,cAAc,EAAE,KAAK,UAAW,CAChC,GAAG,CACD,IAAII,EAAM,KAAK,MAAM,EAAE,IAAI,EAAE,KAAI,CAAE,EACnC,EAAE,IAAI,EAAE,KAAKT,EAAWS,CAAG,CAAC,CAC7B,MAAQ,CAER,CACL,CAAG,CACH,CAAC"}